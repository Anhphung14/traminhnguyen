# Use the official PHP image with Apache
FROM php:8.2-apache

# Set timezone and install dependencies
ENV TZ=Asia/Ho_Chi_Minh
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Install system dependencies, PHP extensions, and Node.js
RUN apt-get update && apt-get install -y --no-install-recommends \
        git \
        curl \
        unzip \
        libzip-dev \
        libpng-dev \
        libjpeg-dev \
        libfreetype6-dev \
        libonig-dev \
        # Add PostgreSQL support
        libpq-dev \
        # Add build tools
        build-essential \
        pkg-config \
        # Add Node.js and npm
        nodejs \
        npm \
    && docker-php-ext-configure gd --with-freetype --with-jpeg \
    && docker-php-ext-install -j$(nproc) gd pdo_mysql pdo_pgsql zip mbstring \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Enable Apache mod_rewrite
RUN a2enmod rewrite

# Set ServerName to suppress Apache warnings
RUN echo "ServerName localhost" >> /etc/apache2/apache2.conf

# Set working directory
WORKDIR /var/www/html

# Copy dependency files
COPY composer.json composer.lock ./
COPY package.json package-lock.json ./

# Install Composer
COPY --from=composer:2 /usr/bin/composer /usr/bin/composer

# Install PHP dependencies without running scripts (to avoid APP_KEY errors)
RUN composer install --no-dev --no-scripts

# Install NPM dependencies
RUN npm install --legacy-peer-deps

# Copy the rest of the application
COPY . .

# Use the Docker-specific .env file
RUN cp .env.docker .env

# Build frontend assets
RUN npm run build

# Generate application key
RUN php artisan key:generate

# Now that the key exists, run composer's post-install scripts
RUN composer dump-autoload --optimize

# Set ownership of all files to the Apache user
RUN chown -R www-data:www-data /var/www/html

# Set the DocumentRoot and directory permissions in Apache config
RUN echo '<VirtualHost *:8000>\n\
    DocumentRoot /var/www/html/public\n\
    <Directory /var/www/html/public>\n\
        AllowOverride All\n\
        Require all granted\n\
    </Directory>\n\
    ErrorLog ${APACHE_LOG_DIR}/error.log\n\
    CustomLog ${APACHE_LOG_DIR}/access.log combined\n\
</VirtualHost>' > /etc/apache2/sites-available/000-default.conf

# Configure Apache to listen on port 8000
RUN sed -i 's/Listen 80/Listen 8000/' /etc/apache2/ports.conf

# Copy and set executable permission for the startup script
COPY startup.sh /usr/local/bin/startup.sh
RUN chmod +x /usr/local/bin/startup.sh

# Expose port 8000
EXPOSE 8000

# Set the entrypoint to our startup script
CMD ["/usr/local/bin/startup.sh"]